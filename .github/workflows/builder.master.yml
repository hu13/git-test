
name: Upload artifact to master
on:
  # Trigger the workflow on push or pull request,
  # but only for the master branch
  push:
    branches:
      - master
    paths:
      - '.github/**'
      - '!hello.py'

  pull_request:


jobs:

  build:
    name: Upload merged commit artifacts
    strategy:
      matrix:
        # os: [macos-11, windows-latest, ubuntu-latest]
        os: [windows-latest]
    runs-on: ${{ matrix.os }}

    steps:

    - uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Get HEAD commit
      run : |
        [[ "${{ github.event_name }}" == "pull_request" ]] && HEAD_COMMIT=${{ github.event.pull_request.head.sha }}
        [[ "${{ github.event_name }}" == "push" ]] && HEAD_COMMIT=${{ github.sha }}
        echo "HEAD_COMMIT=$HEAD_COMMIT" >> $GITHUB_ENV
      shell: bash

    # - name: Set up Go 1.17
    #   uses: actions/setup-go@v2
    #   with:
    #     go-version: 1.17

    # - name: build upgrade archive
    #   run: |
    #     go mod download
    #     go run main.go

    - name: Cache Docker layers
      id: cache-primes
      uses: actions/cache@v2
      with:
        path: C:\.buildx-cache
        key: ${{ runner.os }}-pv-installer-test2-GG

    - name: Cache the base image
      if: steps.cache-primes.outputs.cache-hit == 'true'
      run: |
        ls 'C:\.buildx-cache'

    - name: Cache the base image
      if: steps.cache-primes.outputs.cache-hit != 'true'
      run: |
        mkdir 'C:\.buildx-cache'
        docker pull hello-world
        # docker save --output 'C:\.buildx-cache\base_installer_image.tar' hello-world
        docker save hello-world | gzip > C:\.buildx-cache\base_installer_image.tgz
        ls 'C:\.buildx-cache'
        docker load -i C:\.buildx-cache\base_installer_image.tgz

    - name: test
      run: |
        echo "$Env:TEMP"
        echo "$Env:USERPROFILE"
        # Remove-Item "$Env:Programfiles\dotnet" -Recurse -Force
        # Remove-Item "$Env:Programfiles\Azure Cosmos DB Emulator" -Recurse -Force
        # Remove-Item "$Env:Programfiles\PostgreSQL" -Recurse -Force

        # Remove-Item "$Env:Programfiles\PostgreSQL" -Recurse -Force -ErrorAction SilentlyContinue -ErrorVariable err
        # Write-Host $err
        # C:\Program Files\PostgreSQL

        # $path = "$Env:Programfiles"
        # $colItems = Get-ChildItem $path | Where-Object {$_.PSIsContainer -eq $true} | Sort-Object
        # foreach ($i in $colItems)
        # {
        #     $subFolderItems = Get-ChildItem $i.FullName -recurse -force | Where-Object {$_.PSIsContainer -eq $false} | Measure-Object -property Length -sum | Select-Object Sum
        #     $i.FullName + " -- " + "{0:N2}" -f ($subFolderItems.sum / 1MB) + " MB"
        # }
